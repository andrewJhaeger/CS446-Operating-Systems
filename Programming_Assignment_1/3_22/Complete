//Done

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <unistd.h>
#include <sys/types.h>
#include <string.h>


int main()
{
  const char *name = "HW1"; // placeholder name
  const int SIZE = 4096; // placeholder size - could be much less.
  int USINGTHISNUM = 1; // INPUT NUMBER
  pid_t pid; // Holds process id when forked
  
  int shm_fd; // for shared memory segment
  void *ptr; // address of mapped object
  int prntSize; // For printing properly.
  
  
  
  printf("Welcome to the CS446 program.\n");
  printf("Please enter a non-negative number and press enter.");
  scanf("%d", &USINGTHISNUM); // gets number



  pid = fork(); // forks



  if (pid < 0) // error
  {
  fprintf(stderr, "Failed fork\n"); // failed fork
    return 1;
  }
  else if (pid == 0) // child
  {
    shm_fd = shm_open(name, O_CREAT | O_RDWR, 0666); // creates shared memory block.
	ftruncate(shm_fd,SIZE); // sets size of shared block.
	ptr = mmap(NULL, SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0); // sets memory map
	// MORE SPECIFICALLY, NULL tells kernel to set automatic place,
	// Size is size, PROT_READ | PROT_WRITE is protection levels,
	// MAP_SHARED is shared memory block. shm_fd is shared memory location.
	// 0 is an offset (not using)
	
	

    while (USINGTHISNUM != 1) // exit condition of algorithm
    {
      if (USINGTHISNUM % 2 == 0) // evens
      {
                USINGTHISNUM /= 2; 
	
		prntSize = sprintf(ptr, "%d%s", USINGTHISNUM, "\n"); // print to memory location
		ptr += prntSize; // increment location of writing
      }
      else
      {
        USINGTHISNUM = (USINGTHISNUM * 3) + 1;
		prntSize = sprintf(ptr, "%d%s", USINGTHISNUM, "\n"); // print to memory location
		ptr += prntSize; // increment location of writing.
      }
    } // end while
  } // end elseif (Child block)
  else // PARENT
  {
     wait(NULL); // waits for child completion
     ftruncate(shm_fd,SIZE); // sets size of shared block.
     shm_fd = shm_open(name, O_CREAT | O_RDWR, 0666); // opens shared memory block

     if (shm_fd == -1)
     {
	printf("Could not open shared memory.\n");
	exit(-1);
     }
     ptr = mmap(NULL, SIZE, PROT_READ, MAP_SHARED, shm_fd, 0); // sets memory map
     printf("%s", ptr); // prints contents of written memory
     printf("%s", "END OF PROGRAM\n");
     if (shm_unlink(name) == -1) // release shared memory 
     {
	printf("Error removing %s\n",name);
	exit(-1);
     }
  }

	

  return 0;
}


